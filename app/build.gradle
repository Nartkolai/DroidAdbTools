apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.1"
    def versionPropsFile = file('application.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        defaultConfig {
            applicationId "com.google.nartkolai.droidadbtools"
            minSdkVersion 15
            targetSdkVersion 28
            versionCode code
            versionName "1.0"
        }
    } else {
        throw new GradleException("Could not read application.properties!")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
}


/*Copy builds apk in folder*/
project.afterEvaluate {
    android.applicationVariants.all { variant ->
//        if (variant.buildType.name == 'release') {
//                def inputDir = "${buildDir}/../${variant.buildType.name}/"
        if (variant.buildType.name == 'debug') {
            def inputDir = "${buildDir}/outputs/apk/${variant.buildType.name}/"
            variant.outputs.all {
                Properties appProps = new Properties()
                appProps.load(new FileInputStream(file('application.properties')))
                def newFileName = "app-${variant.buildType.name}-v-${appProps['VERSION_CODE'-1]}.apk"
                def outputDir = "${appProps['USER_HOME']}"
                def inputFile = "app-${variant.buildType.name}.apk"
                copy {
                    from inputDir
                    include inputFile
                    into outputDir
                    rename inputFile, newFileName
                    println "APK FILES COPIED"
                }
            }
        }
    }
}
